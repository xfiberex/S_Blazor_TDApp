@page "/rolesPermisos"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject IRolService RolService
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando roles registrados...</label>
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-person-fill-gear me-2"></i>Configuración - Roles y permisos de usuarios
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermChanged" value="@searchTerm" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="/rolCargo">
                            <i class="bi bi-plus-circle me-2"></i>Nuevo
                        </a>
                    </div>
                </div>
            </div>

            @if (listaRoles is null || !listaRoles.Any())
            {
                <div class="alert alert-info shadow-sm m-3">
                    <i class="bi bi-info-circle me-2"></i>No se encontraron roles. Presione el botón verde <b>"Nuevo"</b> para crearlo.
                </div>
            }
            else
            {
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>ID</th>
                                    <th>Nombre</th>
                                    <th>Descripción</th>
                                    <th>Estado</th>
                                    <th>Creación</th>
                                    <th>Actualización</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in pagedRoles)
                                {
                                    <tr>
                                        <td>@item.RolId</td>
                                        <td>@item.NombreRol</td>
                                        <td>@item.Descripcion</td>
                                        <td>
                                            <span class="badge bg-@(item.Activo ? "success" : "danger")">
                                                @(item.Activo ? "Habilitado" : "Deshabilitado")
                                            </span>
                                        </td>
                                        <td>@item.FechaCreacion.ToString("dd/MM/yyyy - hh:mm tt")</td>
                                        <td>@(item.FechaActualizacion.HasValue ? item.FechaActualizacion.Value.ToString("dd/MM/yyyy - hh:mm tt") : "Nunca")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a class="btn btn-outline-primary btn-sm" href="/rolCargo/@item.RolId" title="Editar">
                                                    <i class="bi bi-pencil-fill"></i>
                                                </a>
                                                <button type="button" class="btn btn-outline-danger btn-sm"
                                                        @onclick="(() => Eliminar(item.RolId, item.NombreRol))" title="Eliminar">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="card-footer text-muted">
                <div class="d-flex justify-content-between align-items-center">
                    @if (filteredRoles.Count > 5)
                    {
                        <div>
                            <label>Mostrar: </label>
                            <select @onchange="OnPageSizeChanged" class="form-select d-inline-block w-auto">
                                @foreach (var option in pageSizeOptions)
                                {
                                    <option value="@option" selected="@(option == pageSize)">
                                        @option
                                    </option>
                                }
                            </select>
                            roles de @filteredRoles.Count en total
                        </div>
                        <div>
                            <button class="btn btn-outline-primary btn-sm" @onclick="PrevPage" disabled="@(currentPage == 1)">Anterior</button>
                            <span class="mx-2">
                                Página @currentPage de @Math.Ceiling((double)filteredRoles.Count / pageSize)
                            </span>
                            <button class="btn btn-outline-primary btn-sm" @onclick="NextPage" disabled="@(currentPage * pageSize >= filteredRoles.Count)">Siguiente</button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <label>
                                <b>@filteredRoles.Count</b> registros encontrados. Si hay más de 5, se filtrará y paginará según la cantidad seleccionada.
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <br />
    }
</div>

@code {
    private List<RolDTO> listaRoles = new();
    private List<RolDTO> filteredRoles = new();
    private List<RolDTO> pagedRoles = new();

    private bool isLoading = true;
    private string searchTerm = "";

    // Parámetros de paginación
    private int currentPage = 1;
    private int pageSize = 5;
    private readonly int[] pageSizeOptions = { 5, 10, 15 };

    // Timer para el debounce en la búsqueda
    private System.Threading.Timer? _searchTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
    }

    private async Task LoadRoles()
    {
        try
        {
            isLoading = true;
            listaRoles = await RolService.Lista();
            filteredRoles = listaRoles;
            currentPage = 1;
            UpdatePagedRoles();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar roles: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Eliminar(int id, string nombreRol)
    {
        var result = await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"¿Deseas eliminar el rol {nombreRol}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            try
            {
                if (await RolService.Eliminar(id))
                {
                    listaRoles.RemoveAll(u => u.RolId == id);
                    FilterRoles();
                    await SwalService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Text = "El rol ha sido eliminado correctamente.",
                            Icon = SweetAlertIcon.Success
                        });
                }
            }
            catch (Exception ex)
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"Ha ocurrido un error al eliminar el rol: {ex.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }

    #region Métodos para la paginación y buqueda

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        _searchTimer?.Dispose();
        _searchTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterRoles();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void FilterRoles()
    {
        filteredRoles = string.IsNullOrWhiteSpace(searchTerm)
            ? listaRoles
            : listaRoles.Where(u =>
                u.NombreRol.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (u.Descripcion?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)).ToList();

        currentPage = 1;
        UpdatePagedRoles();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilterRoles();
    }

    private void UpdatePagedRoles()
    {
        pagedRoles = filteredRoles
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            UpdatePagedRoles();
        }
    }

    private void NextPage()
    {
        if (currentPage * pageSize < filteredRoles.Count)
        {
            currentPage++;
            UpdatePagedRoles();
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedRoles();
        }
    }

    #endregion
}