@page "/tareasCalendario"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@* Using para la autorización de usuarios *@
@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Administrador, Supervisor, Empleado")]

@inject SweetAlertService SwalService
@inject ITareaCalendarioService TareaCalendarioService

<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas de calendario...</label>
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-calendar-event me-2"></i>Gestión - Tareas de calendario
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermChanged" value="@searchTerm" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="/tareaCalendario">
                            <i class="bi bi-plus-circle me-2"></i>Nueva
                        </a>
                    </div>
                </div>
            </div>

            @if (listaTareasCalendario is null || !listaTareasCalendario.Any())
            {
                <div class="alert alert-info shadow-sm m-3">
                    <i class="bi bi-info-circle me-2"></i>No se encontraron tareas de calendario.
                    Presione el botón verde <b>"Nueva"</b> para crearla.
                </div>
            }
            else
            {
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead class="table-light">
                                <tr>
                                    <th>Nombre</th>
                                    <th>Descripción</th>
                                    <th>Estado</th>
                                    <th>Fecha - Hora</th>
                                    <th>Acciones</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var item in pagedTasks)
                                {
                                    <tr>
                                        <td>@item.NombreTarea</td>
                                        <td>
                                            @if (item.DescripcionTarea?.Length > 50)
                                            {
                                                @if (item.ShowFullDescription)
                                                {
                                                    <textarea class="form-control slide-down" rows="3" @bind="item.DescripcionTarea" readonly></textarea>
                                                    <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                        <i class="bi bi-eye-slash"></i>
                                                    </button>
                                                }
                                                else
                                                {
                                                    <span>@item.DescripcionTarea.Substring(0, 50) ...</span>
                                                    <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                        <i class="bi bi-eye"></i>
                                                    </button>
                                                }
                                            }
                                            else
                                            {
                                                <span>@item.DescripcionTarea</span>
                                            }
                                        </td>
                                        <td>
                                            <span class="badge bg-@(item.Habilitado ? "success" : "warning")">
                                                @(item.Habilitado ? "Habilitada" : "Deshabilitada")
                                            </span>
                                        </td>
                                        <td align="center">
                                            @item.Fecha.ToString("dd/MM/yyyy") - @item.Hora.ToString("hh:mm tt")
                                        </td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a class="btn btn-outline-primary btn-sm" href="/tareaCalendario/@item.TareaId" title="Editar">
                                                    <i class="bi bi-pencil-fill"></i>
                                                </a>
                                                <button type="button" class="btn btn-outline-danger btn-sm" @onclick="() => Eliminar(item.TareaId, item.DescripcionTarea!)" title="Eliminar">
                                                    <i class="bi bi-trash-fill"></i>
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            }

            <div class="card-footer text-muted">
                <div class="d-flex justify-content-between align-items-center">
                    @if (filteredTasks.Count > 10)
                    {
                        <div>
                            <label>Mostrar: </label>
                            <select @onchange="OnPageSizeChanged" class="form-select d-inline-block w-auto">
                                @foreach (var option in pageSizeOptions)
                                {
                                    <option value="@option" selected="@(option == pageSize)">
                                        @option
                                    </option>
                                }
                            </select>
                            tareas de @filteredTasks.Count en total
                        </div>
                        <div>
                            <button class="btn btn-outline-primary btn-sm" @onclick="PrevPage" disabled="@(currentPage == 1)">Anterior</button>
                            <span class="mx-2">
                                Página @currentPage de @Math.Ceiling((double)filteredTasks.Count / pageSize)
                            </span>
                            <button class="btn btn-outline-primary btn-sm" @onclick="NextPage" disabled="@(currentPage * pageSize >= filteredTasks.Count)">Siguiente</button>
                        </div>
                    }
                    else
                    {
                        <div>
                            <label>
                                <b>@filteredTasks.Count</b> registros encontrados. Si hay mas de 10, se filtrará y paginará según la cantidad seleccionada.
                            </label>
                        </div>
                    }
                </div>
            </div>
        </div>
        <br />
    }
</div>

@code {
    private List<TareasCalendarioDTO> listaTareasCalendario = new();
    private List<TareasCalendarioDTO> filteredTasks = new();
    private List<TareasCalendarioDTO> pagedTasks = new();

    private bool isLoading = true;
    private string searchTerm = "";
    private TareasCalendarioDTO? expandedItem = null;

    private System.Threading.Timer? _searchTimer;

    private int currentPage = 1;
    private int pageSize = 10;
    private readonly int[] pageSizeOptions = { 10, 15, 20 };

    protected override async Task OnInitializedAsync()
    {
        await LoadTareasCalendario();
    }

    private async Task LoadTareasCalendario()
    {
        try
        {
            isLoading = true;
            listaTareasCalendario = await TareaCalendarioService.Lista();
            filteredTasks = listaTareasCalendario;
            UpdatePagedTasks();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar las tareas de calendario: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Eliminar(int id, string nombreTareaCalendario)
    {
        var result = await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"¿Deseas eliminar la tarea de calendario: {nombreTareaCalendario}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            try
            {
                if (await TareaCalendarioService.Eliminar(id))
                {
                    listaTareasCalendario.RemoveAll(u => u.TareaId == id);
                    FilterTasks();
                    await SwalService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Text = "La tarea de calendario ha sido eliminada correctamente.",
                            Icon = SweetAlertIcon.Success
                        });
                }
            }
            catch (Exception ex)
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"Ha ocurrido un error al eliminar la tarea de calendario: {ex.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }

    private void ToggleDescription(TareasCalendarioDTO item)
    {
        if (expandedItem != null && expandedItem != item)
        {
            expandedItem.ShowFullDescription = false;
        }
        item.ShowFullDescription = !item.ShowFullDescription;
        expandedItem = item.ShowFullDescription ? item : null;
    }

    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        _searchTimer?.Dispose();
        _searchTimer = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterTasks();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void FilterTasks()
    {
        filteredTasks = string.IsNullOrWhiteSpace(searchTerm)
            ? listaTareasCalendario
            : listaTareasCalendario.Where(t =>
                t.NombreTarea.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (t.DescripcionTarea?.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ?? false)
            ).ToList();
        currentPage = 1;
        UpdatePagedTasks();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilterTasks();
    }

    private void UpdatePagedTasks()
    {
        pagedTasks = filteredTasks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            UpdatePagedTasks();
        }
    }

    private void NextPage()
    {
        if (currentPage * pageSize < filteredTasks.Count)
        {
            currentPage++;
            UpdatePagedTasks();
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedTasks();
        }
    }
}