@page "/"
@layout LoginLayout

@using System.ComponentModel.DataAnnotations
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Shared

@inject HttpClient Http
@inject NavigationManager Navigation
@inject SweetAlertService SwalService

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-11 col-md-7 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-person-fill me-2"></i>Inicio de Sesión</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="loginRequest" OnValidSubmit="HandleLogin" Context="editContext">
                        <DataAnnotationsValidator />
                        @if (editContext.GetValidationMessages().Any())
                        {
                            <div class="alert alert-danger mb-4">
                                <h5 class="alert-heading"><i class="bi bi-exclamation-triangle-fill me-2"></i>Datos necesarios</h5>
                                <ValidationSummary />
                            </div>
                        }

                        <!-- Nombre de Usuario -->
                        <div class="mb-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-person me-2"></i>Usuario</span>
                                <InputText id="nombreUsuario" class="form-control" placeholder="..."
                                           @bind-Value="loginRequest.Username" />
                            </div>
                        </div>
                        
                        <!-- Contraseña -->
                        <div class="mb-4">
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-key me-2"></i>Contraseña</span>
                                <InputText id="clave" type="password" class="form-control" placeholder="..."
                                           @bind-Value="loginRequest.Password" />
                            </div>
                        </div>

                        <button type="submit" class="btn btn-primary" disabled="@isLoggingIn">
                            @if (isLoggingIn)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            else
                            {
                                <span>Ingresar</span>
                            }
                        </button>
                    </EditForm>
                </div>
            </div>
            <br />
        </div>
    </div>
</div>

@code {
    private bool isLoggingIn = false;
    private LoginRequest loginRequest = new LoginRequest();

    private EditContext editContext = null!;

    protected override void OnInitialized()
    {
        editContext = new EditContext(loginRequest);
    }

    private async Task HandleLogin()
    {
        isLoggingIn = true;
        try
        {
            // Se envía la solicitud al endpoint de login
            var response = await Http.PostAsJsonAsync("api/Usuario/Login", loginRequest);
            if (response.IsSuccessStatusCode)
            {
                var resultado = await response.Content.ReadFromJsonAsync<ResponseAPI<LoginResponse>>();
                
                if (resultado is not null && resultado.EsCorrecto)
                {
                    // Aquí puedes almacenar el token en el localStorage o en un servicio
                    // Ejemplo: await localStorage.SetItemAsync("authToken", resultado.Valor.Token);
                    // También es común actualizar el AuthenticationStateProvider
                    Navigation.NavigateTo("/registroProcesos");
                }
                else
                {
                    await SwalService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = resultado?.Mensaje ?? "Error en la autenticación.",
                            Icon = SweetAlertIcon.Error
                        });
                }
            }
            else
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Error al comunicarse con el servidor.",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al iniciar sesión: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoggingIn = false;
        }
    }
}