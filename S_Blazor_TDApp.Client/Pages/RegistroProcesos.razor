@page "/registroProcesos"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@* Using para la autorización de usuarios *@
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using System.Globalization
@attribute [Authorize(Roles = "Administrador, Supervisor, Empleado")]

@inject SweetAlertService SwalService
@inject IUsuarioService UsuarioService
@inject ITareaDiasService TareaDiasService
@inject ITareaRecurrenteService TareaRecurrenteService
@inject ITareaCalendarioService TareaCalendarioService
@inject IRegistroProcesosService RegistroProcesoService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@inject AuthenticationStateProvider authStateProvider


<!-- Lista de tareas recurrentes reportables -->
<div id="tareas" class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas recurrentes...</label>
        </div>
    }
    else if (listaTareasRecurrentes == null || listaTareasRecurrentes.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>
            No se encontraron tareas recurrentes para reportar. Cree las tareas desde el menú <b>Recurrentes</b> en la barra lateral izquierda.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-card-checklist me-2"></i>Reportar tareas recurrentes
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermTaskChanged"
                                   value="@searchTermTask" />
                            @if (!string.IsNullOrEmpty(searchTermTask))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="#procesos">
                            <i class="bi bi-arrow-bar-down me-2"></i>Procesos
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Recurrente | Tiempo</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in filteredTasks)
                            {
                                <tr>
                                    <td>@item.NombreTareaRecurr</td>
                                    <td>
                                        @if (item.DescripcionTareaRecurr.Length > 35)
                                        {
                                            @if (item.ShowFullDescription)
                                            {
                                                <textarea class="form-control slide-down" rows="3" @bind="item.DescripcionTareaRecurr" readonly></textarea>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye-slash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span>@item.DescripcionTareaRecurr.Substring(0, 35)...</span>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span>@item.DescripcionTareaRecurr</span>
                                        }
                                    </td>
                                    <td>
                                        @if (item.Recurrente)
                                        {
                                            <span class="badge bg-primary">Si</span>
                                            <span> | cada @ConvertirTiempoEjecucion(item.TiempoEjecucion)</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No</span>
                                            <span> | @GetUserProcessCount(item.TareaRecurrId) de @item.CantidadEjecuciones</span>
                                        }
                                    </td>
                                    <td>
                                        @if (EstaProgramadaHoy(item.TareaRecurrId))
                                        {
                                            @if (item.Recurrente)
                                            {
                                                <span class="badge bg-@(item.EstadoExpiracion ? "success" : "danger")">
                                                    @(item.EstadoExpiracion ? "Renovada" : "Expirada")
                                                </span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-@(GetUserProcessCount(item.TareaRecurrId) >= item.CantidadEjecuciones ? "success" : "warning")">
                                                    @(GetUserProcessCount(item.TareaRecurrId) >= item.CantidadEjecuciones ? "Completado" : "En proceso")
                                                </span>
                                            }
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No programada</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-outline-primary btn-sm"
                                                    @onclick="() => OpenModal(item)"
                                                    title="Registrar"
                                                    disabled="@( !EstaProgramadaHoy(item.TareaRecurrId) || (!item.Recurrente && GetUserProcessCount(item.TareaRecurrId) >= item.CantidadEjecuciones) )">
                                                <i class="bi bi-pencil-fill me-2"></i>Registrar
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de tareas recurrentes: @filteredTasks.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Lista de tareas de calendario -->
<div id="tareasCalendario" class="container-fluid mt-4">
    @if (isLoadingCalendario)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas de calendario...</label>
        </div>
    }
    else if (listaCalendario == null || listaCalendario.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>
            No se encontraron tareas de calendario. Cree las tareas desde el menú <b>Calendario</b> en la barra lateral izquierda.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-calendar-check me-2"></i>Validar tareas de calendario
                        </h5>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Fecha y Hora</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in listaCalendario)
                            {
                                <tr>
                                    <td>@item.NombreTarea</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(item.DescripcionTarea) && item.DescripcionTarea.Length > 35)
                                        {
                                            <span>@item.DescripcionTarea.Substring(0, 35)...</span>
                                        }
                                        else
                                        {
                                            <span>@item.DescripcionTarea</span>
                                        }
                                    </td>
                                    <td>
                                        @item.Fecha.ToString("dd/MM/yyyy") - @item.Hora.ToString("HH:mm:ss tt")
                                    </td>
                                    <td>
                                        @if (IsTaskAvailable(item))
                                        {
                                            <span class="badge bg-warning">Revisar</span>
                                        }
                                        else
                                        {
                                            <span class="badge bg-secondary">No programado</span>
                                        }
                                    </td>
                                    <td>
                                        <button class="btn btn-outline-primary btn-sm"
                                                @onclick="() => OpenValidarTareaCalendarioModal(item)"
                                                disabled="@( !IsTaskAvailable(item) )">
                                            Validar
                                        </button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
</div>

<!-- Lista de procesos registrados -->
<div id="procesos" class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando procesos registrados...</label>
        </div>
    }
    else if (listaRegistroProcesos == null || listaRegistroProcesos.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron procesos de tareas registrados.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-clock-history me-2"></i>Historial de tareas procesadas
                        </h5>
                    </div>
                    <!-- Filtrado por fecha -->
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar me-2"></i>Fecha</span>
                            <input type="date" class="form-control" @bind="startDate" @bind:after="FilterTasksProcess" />
                        </div>
                    </div>
                    <!-- Filtrado por texto -->
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermProcessChanged"
                                   value="@searchTermProcess" />
                            @if (!string.IsNullOrEmpty(searchTermProcess))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearchProcess">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="#tareas">
                            <i class="bi bi-arrow-bar-up me-2"></i>Tareas
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th hidden>ID Tarea</th>
                                <th>Nombre Tarea</th>
                                <th hidden>ID Usuario</th>
                                <th>Usuario</th>
                                <th>Fecha</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in filteredTasksProcess)
                            {
                                <tr>
                                    <td hidden>@item.TareaRecurrId</td>
                                    <td>@item.RefTareaRecurr?.NombreTareaRecurr</td>
                                    <td hidden>@item.UsuarioId</td>
                                    <td>@item.RefUsuario?.NombreUsuario</td>
                                    <td>@item.FechaRegistro.ToString("dd/MM/yyyy - hh:mm:ss tt")</td>
                                    <td>@item.DescripcionRegistro</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de procesos registrados: @filteredTasksProcess.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Modal para registrar los reportes de procesos -->
<div class="modal fade" id="registroProcesoModal" tabindex="-1" aria-labelledby="registroProcesoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="registroProceso" OnValidSubmit="RegistrarProceso">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="registroProcesoModalLabel">Registrar Proceso</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="alert alert-info shadow-sm m-3">
                    <strong>Detalles de la tarea seleccionada:</strong>
                    @if (selectedTask != null)
                    {
                        <ul class="list-unstyled mt-2">
                            <li><strong>Nombre:</strong> @selectedTask.NombreTareaRecurr</li>
                            <li><strong>Recurrente:</strong> @(selectedTask.Recurrente ? "Sí" : "No")</li>
                            @if (selectedTask.Recurrente)
                            {
                                <li><strong>Tiempo de Ejecución:</strong> cada @ConvertirTiempoEjecucion(selectedTask.TiempoEjecucion)</li>
                            }
                            else
                            {
                                <li><strong>Desde:</strong> @selectedTask.HoraDesde.ToString("hh:mm tt")</li>
                                <li><strong>Hasta:</strong> @selectedTask.HorasHasta.ToString("hh:mm tt")</li>
                                <li>
                                    <strong>Cantidad de Ejecuciones:</strong>
                                    @GetUserProcessCount(selectedTask.TareaRecurrId) de @selectedTask.CantidadEjecuciones
                                </li>
                            }
                            <li><strong>Estado:</strong> @(selectedTask.EstadoExpiracion ? "Renovada" : "Expirada")</li>
                        </ul>
                    }
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <InputTextArea id="comentario" class="form-control" placeholder="Escriba el informe..."
                                       @bind-Value="registroProceso.DescripcionRegistro" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Registrar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<!-- Modal para validar tarea de calendario -->
<div class="modal fade" id="validarTareaCalendarioModal" tabindex="-1" aria-labelledby="validarTareaCalendarioModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="tareaCalendarioCompleto" OnValidSubmit="ValidarTareaCalendario">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="validarTareaCalendarioModalLabel">Validar Tarea de Calendario</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="alert alert-info shadow-sm m-3">
                    <strong>Detalles de la tarea seleccionada:</strong>
                    @if (selectedTareaCalendario != null)
                    {
                        <ul class="list-unstyled mt-2">
                            <li><strong>Nombre:</strong> @selectedTareaCalendario.NombreTarea</li>
                            <li><strong>Estado:</strong> @(IsTaskAvailable(selectedTareaCalendario) ? "Revisar" : "No programado")</li>
                            <li><strong>Fecha y Hora actuales:</strong> @selectedTareaCalendario.Fecha.ToString("dd/MM/yyyy") - @selectedTareaCalendario.Hora.ToString("HH:mm:ss tt")</li>
                        </ul>
                    }
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">Nueva fecha</span>
                            <InputDate @bind-Value="tareaCalendarioCompleto.RefTareaCalendario!.Fecha" class="form-control" onchange="OnDateChanged" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <div class="input-group">
                            <span class="input-group-text">Nueva hora</span>
                            <InputText @bind-Value="horaInput" type="time" step="1" class="form-control" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <InputTextArea @bind-Value="tareaCalendarioCompleto.DescripcionTareaCompletado" class="form-control" placeholder="Comentario sobre la validación..." />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Validar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    #region Variables y métodos de carga y actualización de datos

    // Listas de datos
    private List<RegistroProcesoDTO> listaRegistroProcesos = new List<RegistroProcesoDTO>();
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new List<TareasRecurrentesDTO>();
    private List<TareasCalendarioDTO> listaCalendario = new List<TareasCalendarioDTO>();

    // Listas filtradas para mostrar en la vista
    private List<TareasRecurrentesDTO> filteredTasks = new List<TareasRecurrentesDTO>();
    private List<RegistroProcesoDTO> filteredTasksProcess = new List<RegistroProcesoDTO>();
    private List<TareasCalendarioDTO> filteredTareaCalendario = new List<TareasCalendarioDTO>();

    // Datos para registrar procesos
    private RegistroProcesoDTO registroProceso = new RegistroProcesoDTO();
    private TareasCalendarioCompletadoDTO tareaCalendarioCompleto = new TareasCalendarioCompletadoDTO { RefTareaCalendario = new TareasCalendarioDTO() };
    private TareasCalendarioDTO tareaCalendario = new TareasCalendarioDTO { Fecha = DateTime.Now, Hora = DateTime.Now };

    // Variables de estado y filtros
    private bool isLoading = true;
    private bool isLoadingCalendario = true;

    private string searchTermTask = "";
    private string searchTermProcess = "";
    private DateTime? startDate;

    private TareasRecurrentesDTO? expandedItem = null;
    private TareasRecurrentesDTO? selectedTask = null;
    private TareasCalendarioDTO? selectedTareaCalendario = null;

    // Timers para debounce y refresco automático
    private System.Threading.Timer? _searchTimerTasks;
    private System.Threading.Timer? _searchTimerProcess;
    private System.Threading.Timer? _refreshTimer;

    // Diccionario para contar registros por tarea (por usuario actual)
    private Dictionary<int, int> userProcessCount = new();
    private int currentUserId;

    // Diccionario para almacenar los días asignados a cada tarea, pero en formato TareaDiasDTO
    private Dictionary<int, List<TareaDiasDTO>> taskDiasMap = new();

    private async Task LoadTareaDiasForAllTasks()
    {
        taskDiasMap.Clear();
        foreach (var tarea in listaTareasRecurrentes)
        {
            var dias = await TareaDiasService.ListaPorTareaRecurrId(tarea.TareaRecurrId);
            taskDiasMap[tarea.TareaRecurrId] = dias;
        }
    }

    // Método auxiliar para convertir DayOfWeek a nombre en español
    private string GetSpanishDayName(DayOfWeek day) => day switch
    {
        DayOfWeek.Monday => "Lunes",
        DayOfWeek.Tuesday => "Martes",
        DayOfWeek.Wednesday => "Miércoles",
        DayOfWeek.Thursday => "Jueves",
        DayOfWeek.Friday => "Viernes",
        DayOfWeek.Saturday => "Sábado",
        DayOfWeek.Sunday => "Domingo",
        _ => ""
    };

    // Método que verifica si la tarea tiene configurado el día actual
    private bool EstaProgramadaHoy(int tareaRecurrId)
    {
        if (taskDiasMap.ContainsKey(tareaRecurrId) && taskDiasMap[tareaRecurrId].Any())
        {
            var hoy = GetSpanishDayName(DateTime.Now.DayOfWeek);
            return taskDiasMap[tareaRecurrId].Any(d => d.Dia.NombreDia!.Equals(hoy, StringComparison.OrdinalIgnoreCase));
        }
        // Si no se han configurado días, se asume que la tarea está programada
        return true;
    }

    protected override async Task OnInitializedAsync()
    {
        // Obtener el estado de autenticación actual
        var authState = await authStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Extraer el email del usuario autenticado
            var email = user.FindFirst(ClaimTypes.Email)?.Value;
            if (!string.IsNullOrEmpty(email))
            {
                // Utilizar el servicio para obtener el usuario por email
                var usuario = await UsuarioService.ObtenerPorEmail(email);
                if (usuario != null)
                {
                    currentUserId = usuario.UsuarioId;
                }
            }
        }

        await LoadTareasRecurrentes();
        await LoadTareasCalendario();
        await LoadProcesosRegistrados();
        await LoadTareaDiasForAllTasks();

        // Refresco automático cada 30 segundos
        _refreshTimer = new System.Threading.Timer(async _ =>
        {
            await InvokeAsync(async () =>
            {
                await RefreshData();
                StateHasChanged();
            });
        }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task RefreshData()
    {
        try
        {
            listaTareasRecurrentes = (await TareaRecurrenteService.Lista())
                                        .Where(t => t.Estado)
                                        .ToList();
            filteredTasks = listaTareasRecurrentes;

            listaRegistroProcesos = (await RegistroProcesoService.ListaProcesos())
                                        .OrderByDescending(p => p.FechaRegistro)
                                        .ToList();
            filteredTasksProcess = listaRegistroProcesos;

            BuildUserProcessCount();
            await LoadTareaDiasForAllTasks();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error al refrescar datos",
                    Text = ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    #endregion


    #region Métodos para cargar tareas, procesos y registrar procesos

    private async Task LoadTareasRecurrentes()
    {
        try
        {
            isLoading = true;
            // Filtrar solo tareas habilitadas
            listaTareasRecurrentes = (await TareaRecurrenteService.Lista())
                                        .Where(t => t.Estado)
                                        .ToList();
            filteredTasks = listaTareasRecurrentes;
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar las tareas recurrentes: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadTareasCalendario()
    {
        try
        {
            isLoadingCalendario = true;
            listaCalendario = (await TareaCalendarioService.Lista())
                                        .Where(t => t.Habilitado)
                                        .ToList();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar tareas de calendario: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoadingCalendario = false;
            StateHasChanged();
        }
    }

    private async Task LoadProcesosRegistrados()
    {
        try
        {
            isLoading = true;
            listaRegistroProcesos = (await RegistroProcesoService.ListaProcesos())
                                        .OrderByDescending(p => p.FechaRegistro)
                                        .ToList();
            filteredTasksProcess = listaRegistroProcesos;
            BuildUserProcessCount();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar los procesos registrados: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void BuildUserProcessCount()
    {
        userProcessCount = listaRegistroProcesos
            .GroupBy(rp => rp.TareaRecurrId)
            .ToDictionary(
                g => g.Key,
                g => g.Count(rp => rp.UsuarioId == currentUserId)
            );
    }

    private int GetUserProcessCount(int tareaRecurrId) =>
        userProcessCount.ContainsKey(tareaRecurrId) ? userProcessCount[tareaRecurrId] : 0;

    private async Task OpenModal(TareasRecurrentesDTO task)
    {
        selectedTask = task;
        registroProceso = new RegistroProcesoDTO
            {
                TareaRecurrId = task.TareaRecurrId,
                UsuarioId = currentUserId,
                FechaRegistro = DateTime.Now
            };

        await JSRuntime.InvokeVoidAsync("showModal", "registroProcesoModal");
    }

    private async Task RegistrarProceso()
    {
        try
        {
            // Actualizar la fecha de registro
            registroProceso.FechaRegistro = DateTime.Now;

            await RegistroProcesoService.GuardarProcesos(registroProceso);
            await LoadProcesosRegistrados();
            await LoadTareasRecurrentes();
            await JSRuntime.InvokeVoidAsync("hideModal", "registroProcesoModal");
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al registrar el proceso: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    public void Dispose()
    {
        _searchTimerTasks?.Dispose();
        _searchTimerProcess?.Dispose();
        _refreshTimer?.Dispose();
    }

    #endregion


    #region Metodo relacionado con las tareas de calendario

    // Método que determina si la tarea está disponible para revisión (Revisar)
    private bool IsTaskAvailable(TareasCalendarioDTO task)
    {
        // Combinar la Fecha y la Hora para obtener el DateTime programado
        var scheduled = new DateTime(task.Fecha.Year, task.Fecha.Month, task.Fecha.Day, task.Hora.Hour, task.Hora.Minute, task.Hora.Second);
        return DateTime.Now >= scheduled && task.Habilitado;
    }

    // Método para abrir el modal y preparar los datos de la tarea de calendario
    private async Task OpenValidarTareaCalendarioModal(TareasCalendarioDTO task)
    {
        selectedTareaCalendario = task;
        tareaCalendarioCompleto = new TareasCalendarioCompletadoDTO
            {
                TareaId = task.TareaId,
                UsuarioId = currentUserId,
                RefTareaCalendario = new TareasCalendarioDTO
                {
                    TareaId = task.TareaId,
                    NombreTarea = task.NombreTarea,               
                    DescripcionTarea = task.DescripcionTarea,   
                    Fecha = task.Fecha,
                    Hora = task.Hora,
                    Habilitado = task.Habilitado
                }
            };
        await JSRuntime.InvokeVoidAsync("showModal", "validarTareaCalendarioModal");
    }

    // Método que se ejecuta al validar la tarea de calendario
    private async Task ValidarTareaCalendario()
    {
        // Verificar que la nueva fecha/hora sean diferentes a las actuales
        if (selectedTareaCalendario != null)
        {
            if (selectedTareaCalendario.Fecha.Date == tareaCalendarioCompleto.RefTareaCalendario!.Fecha.Date &&
               selectedTareaCalendario.Hora.TimeOfDay == tareaCalendarioCompleto.RefTareaCalendario.Hora.TimeOfDay)
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Validación",
                        Text = "La nueva fecha y hora no pueden ser iguales a las actuales.",
                        Icon = SweetAlertIcon.Warning
                    });
                return;
            }
        }
        try
        {
            await RegistroProcesoService.RegistrarTareaCalendario(tareaCalendarioCompleto);
            await LoadTareasCalendario(); // Refrescar la lista de tareas de calendario
            await JSRuntime.InvokeVoidAsync("hideModal", "validarTareaCalendarioModal");
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Éxito",
                    Text = "La tarea de calendario ha sido validada.",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al validar la tarea de calendario: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    // Captura el cambio en la fecha y asigna solo la parte de la fecha (la hora queda en 00:00:00)
    private void OnDateChanged(ChangeEventArgs e)
    {
        if (DateTime.TryParse(e.Value?.ToString(), out DateTime selectedDate))
        {
            tareaCalendarioCompleto.RefTareaCalendario!.Fecha = selectedDate.Date;
        }
    }

    // Propiedad para enlazar la hora en formato "HH:mm:ss"
    private string horaInput
    {
        get => tareaCalendarioCompleto.RefTareaCalendario!.Hora.ToString("HH:mm:ss");
        set => _ = SetHoraInputAsync(value);
    }

    // Método asíncrono para actualizar la propiedad 'Hora' validando el formato ingresado
    private async Task SetHoraInputAsync(string value)
    {
        try
        {
            if (DateTime.TryParseExact(value, "HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedTime))
            {
                // Se conserva la fecha original de 'Hora' y se actualiza solo el TimeOfDay
                tareaCalendarioCompleto.RefTareaCalendario!.Hora = tareaCalendarioCompleto.RefTareaCalendario.Hora.Date.Add(parsedTime.TimeOfDay);
            }
            else
            {
                throw new FormatException("El formato de la hora debe ser 'HH:mm:ss'.");
            }
        }
        catch (FormatException ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error de formato",
                    Text = ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Ha ocurrido un error al guardar la hora: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    #endregion


    #region Métodos de filtrado, conversión de tiempos y descripción

    private void ToggleDescription(TareasRecurrentesDTO item)
    {
        if (expandedItem != null && expandedItem != item)
        {
            expandedItem.ShowFullDescription = false;
        }
        item.ShowFullDescription = !item.ShowFullDescription;
        expandedItem = item.ShowFullDescription ? item : null;
    }

    private void OnSearchTermTaskChanged(ChangeEventArgs e)
    {
        searchTermTask = e.Value?.ToString() ?? string.Empty;
        _searchTimerTasks?.Dispose();
        _searchTimerTasks = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterTasks();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void OnSearchTermProcessChanged(ChangeEventArgs e)
    {
        searchTermProcess = e.Value?.ToString() ?? string.Empty;
        _searchTimerProcess?.Dispose();
        _searchTimerProcess = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterTasksProcess();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void FilterTasks()
    {
        filteredTasks = listaTareasRecurrentes.Where(t =>
            string.IsNullOrWhiteSpace(searchTermTask) ||
            t.NombreTareaRecurr.Contains(searchTermTask, StringComparison.OrdinalIgnoreCase) ||
            t.DescripcionTareaRecurr.Contains(searchTermTask, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private void FilterTasksProcess()
    {
        filteredTasksProcess = listaRegistroProcesos.Where(t =>
            (string.IsNullOrWhiteSpace(searchTermProcess) ||
             t.DescripcionRegistro.Contains(searchTermProcess, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || t.FechaRegistro.Date == startDate.Value.Date)
        ).ToList();
    }

    private void ClearSearch()
    {
        searchTermTask = string.Empty;
        FilterTasks();
    }

    private void ClearSearchProcess()
    {
        searchTermProcess = string.Empty;
        startDate = null;
        FilterTasksProcess();
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440)
        {
            int dias = minutos / 1440;
            return $"{dias} {(dias > 1 ? "días" : "día")}";
        }
        else if (minutos >= 60)
        {
            int horas = minutos / 60;
            return $"{horas} {(horas > 1 ? "horas" : "hora")}";
        }
        else
        {
            return $"{minutos} min";
        }
    }

    private string ConvertirCantidadEjecuciones(int cantidad) =>
        cantidad == 1 ? $"{cantidad} vez" : $"{cantidad} veces";

    #endregion
}