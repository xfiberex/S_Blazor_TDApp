@page "/tareaRecurrente"
@page "/tareaRecurrente/{IdTareaRecurrenteEditar:int}"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces
@using System.Globalization

@inject ITareaRecurrenteService TareaRecurrenteService
@inject NavigationManager NavigationManager
@inject SweetAlertService SwalService

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-12 col-md-8 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-clock-history me-2"></i>@titulo</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="tareaRecurrente" OnValidSubmit="OnValidSubmit" Context="editContext">
                        <DataAnnotationsValidator />
                        @if (editContext.GetValidationMessages().Any())
                        {
                            <div class="alert alert-danger shadow-sm mb-3">
                                <h5 class="alert-heading">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Datos necesarios
                                </h5>
                                <ValidationSummary />
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-info shadow-sm mb-3">
                                <h6 class="alert-heading">
                                    <i class="bi bi-info-circle me-1"></i>
                                    Si una tarea <b>no es recurrente,</b> el tiempo existente pasará a ser un intervalo específico y estará disponible solo durante ese período en la sección de procesos.
                                </h6>
                            </div>
                        }
                        <!-- Nombre de tarea -->
                        <div class="mb-3">
                            <label for="nombreTareaRecurr" class="form-label">Nombre</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-card-heading"></i></span>
                                <InputText id="nombreTareaRecurr" class="form-control"
                                           placeholder="Ingrese el nombre de la tarea"
                                           @bind-Value="tareaRecurrente.NombreTareaRecurr" />
                            </div>
                        </div>
                        <!-- Descripción -->
                        <div class="mb-3">
                            <label for="descripcionTareaRecurr" class="form-label">Descripción</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-card-text"></i></span>
                                <InputTextArea id="descripcionTareaRecurr" class="form-control"
                                               placeholder="Describa la tarea"
                                               @bind-Value="tareaRecurrente.DescripcionTareaRecurr" />
                            </div>
                        </div>
                        <!-- Recurrencia -->
                        <div class="mb-3">
                            <label for="recurrente" class="form-label">Recurrente</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-arrow-repeat"></i></span>
                                <InputSelect id="recurrente" class="form-select" @bind-Value="recurrente">
                                    <option value="true">Si</option>
                                    <option value="false">No</option>
                                </InputSelect>
                            </div>
                        </div>
                        <!-- Hora Desde -->
                        <div class="mb-3">
                            <label for="horaDesde" class="form-label">Hora Desde</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-clock"></i></span>
                                <InputText id="horaDesde" type="time" class="form-control" step="1"
                                           @bind-Value="horaDesdeInput" />
                            </div>
                        </div>
                        <!-- Hora Hasta -->
                        <div class="mb-3">
                            <label for="horaHasta" class="form-label">Hora Hasta</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-clock-fill"></i></span>
                                <InputText id="horaHasta" type="time" class="form-control" step="1"
                                           @bind-Value="horaHastaInput" />
                            </div>
                        </div>
                        <!-- Tiempo de ejecución -->
                        <div class="mb-3">
                            <label for="tiempoEjecucion" class="form-label">Tiempo de Ejecución</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-hourglass-split"></i></span>
                                <InputNumber id="tiempoEjecucion" class="form-control"
                                             @bind-Value="tareaRecurrente.TiempoEjecucion" disabled />
                            </div>
                        </div>
                        <!-- Cantidad de ejecución -->
                        <div class="mb-3">
                            <label for="cantidadEjecucion" class="form-label">Cantidad de Ejecución</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-hash"></i></span>
                                <InputNumber id="cantidadEjecucion" class="form-control"
                                             placeholder="Indica la cantidad de veces que se habilitará la tarea"
                                             @bind-Value="tareaRecurrente.CantidadEjecuciones"
                                             disabled="@tareaRecurrente.Recurrente" />
                            </div>
                        </div>
                        <!-- Estado de la tarea -->
                        <div class="mb-3">
                            <label for="estado" class="form-label">Estado</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                                <InputSelect id="estado" class="form-select" @bind-Value="tareaRecurrente.Estado">
                                    <option value="true">Habilitado</option>
                                    <option value="false">Deshabilitado</option>
                                </InputSelect>
                            </div>
                        </div>
                        <!-- Botones -->
                        <div class="d-flex justify-content-between">
                            <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                @if (isSaving)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                }
                                else if (btnTexto == "Guardar")
                                {
                                    <i class="bi bi-save me-2"></i>
                                }
                                else if (btnTexto == "Actualizar")
                                {
                                    <i class="bi bi-pencil-square me-2"></i>
                                }
                                @btnTexto
                            </button>
                            <a class="btn btn-outline-secondary" href="/tareasRecurrentes">
                                <i class="bi bi-arrow-left me-2"></i>Volver a la lista
                            </a>
                        </div>
                    </EditForm>
                </div>
            </div>
            <br />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int IdTareaRecurrenteEditar { get; set; } = 0;

    private EditContext editContext = null!;
    private string titulo = string.Empty;
    private string btnTexto = string.Empty;
    public bool isSaving = false;

    private TareasRecurrentesDTO tareaRecurrente = new TareasRecurrentesDTO();

    private bool recurrente
    {
        get => tareaRecurrente.Recurrente;
        set
        {
            tareaRecurrente.Recurrente = value;
            // Si es recurrente, se fija la cantidad de ejecuciones en 1 por defecto.
            tareaRecurrente.CantidadEjecuciones = value ? 1 : tareaRecurrente.CantidadEjecuciones;
            CalcularTiempoEjecucion();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (IdTareaRecurrenteEditar != 0)
            {
                tareaRecurrente = await TareaRecurrenteService.Buscar(IdTareaRecurrenteEditar);
                btnTexto = "Actualizar";
                titulo = "Editar tarea recurrente";
            }
            else
            {
                btnTexto = "Guardar";
                titulo = "Nueva tarea recurrente";
            }
            editContext = new EditContext(tareaRecurrente);
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar datos: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task OnValidSubmit()
    {
        isSaving = true;
        try
        {
            int idDevuelto = (IdTareaRecurrenteEditar == 0)
                ? await TareaRecurrenteService.Guardar(tareaRecurrente)
                : await TareaRecurrenteService.Editar(tareaRecurrente);

            if (idDevuelto != 0)
            {
                NavigationManager.NavigateTo("/tareasRecurrentes");
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Ha ocurrido un error al guardar la tarea recurrente: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isSaving = false;
        }
    }

    private string horaDesdeInput
    {
        get => tareaRecurrente.HoraDesde.ToString("HH:mm:ss");
        set => _ = SetHoraDesdeInputAsync(value);
    }

    private string horaHastaInput
    {
        get => tareaRecurrente.HorasHasta.ToString("HH:mm:ss");
        set => _ = SetHoraHastaInputAsync(value);
    }

    private async Task SetHoraDesdeInputAsync(string value)
    {
        try
        {
            if (DateTime.TryParseExact(value, "HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedTime))
            {
                tareaRecurrente.HoraDesde = tareaRecurrente.HoraDesde.Date.Add(parsedTime.TimeOfDay);
                CalcularTiempoEjecucion();
            }
            else
            {
                throw new FormatException("El formato de la hora debe ser 'HH:mm:ss'.");
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task SetHoraHastaInputAsync(string value)
    {
        try
        {
            if (DateTime.TryParseExact(value, "HH:mm:ss", CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime parsedTime))
            {
                tareaRecurrente.HorasHasta = tareaRecurrente.HorasHasta.Date.Add(parsedTime.TimeOfDay);
                CalcularTiempoEjecucion();
            }
            else
            {
                throw new FormatException("El formato de la hora debe ser 'HH:mm:ss'.");
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = ex.Message,
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private void CalcularTiempoEjecucion()
    {
        if (tareaRecurrente.HoraDesde != default && tareaRecurrente.HorasHasta != default)
        {
            var diffMinutes = (tareaRecurrente.HorasHasta - tareaRecurrente.HoraDesde).TotalMinutes;
            tareaRecurrente.TiempoEjecucion = (int)diffMinutes;
        }
    }
}