@page "/usuario"
@page "/usuario/{IdUsuarioEditar:int}"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces
@using System.ComponentModel.DataAnnotations
@attribute [Authorize(Roles = "Administrador, Supervisor")]

@inject IUsuarioService UsuarioService
@inject IRolService RolService
@inject NavigationManager NavigationManager
@inject SweetAlertService SwalService
@inject AuthenticationStateProvider authStateProvider

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-11 col-md-7 col-lg-6">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-person-fill me-2"></i>@titulo</h5>
                </div>
                <div class="card-body">
                    <EditForm Model="usuario" OnValidSubmit="OnValidSubmit" Context="editContext">
                        <DataAnnotationsValidator />
                        @if (editContext.GetValidationMessages().Any())
                        {
                            <div class="alert alert-danger mb-4">
                                <h5 class="alert-heading"><i class="bi bi-exclamation-triangle-fill me-2"></i>Datos necesarios</h5>
                                <ValidationSummary />
                            </div>
                        }

                        @if (listaRoles is null || !listaRoles.Any())
                        {
                            <div class="alert alert-warning shadow-sm mb-0">
                                <i class="bi bi-exclamation-triangle-fill me-2"></i>No existen roles. Para crearlos diríjase a la sección <b>"Roles y Permisos"</b> en la barra lateral izquierda.
                            </div>
                        }
                        else
                        {
                            <div class="row mb-4">
                                <!-- ID del Usuario -->
                                <div class="col-md-4 col-lg-3">
                                    <div class="input-group">
                                        <span class="input-group-text">ID</span>
                                        <InputText id="idUsuario" class="form-control text-center" @bind-Value="idUsuarioDisplay" disabled />
                                    </div>
                                </div>

                                <!-- Código del Usuario -->
                                <div class="col-md-4 col-lg-4">
                                    <div class="input-group">
                                        <span class="input-group-text">Código</span>
                                        <InputText id="codigoUsuario" class="form-control text-center" @bind-Value="codigoUsuarioDisplay" disabled />
                                    </div>
                                </div>

                                <!-- Nombre de Usuario -->
                                <div class="col-md-4 col-lg-5">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-person"></i></span>
                                        <InputText id="nombreUsuario" class="form-control" placeholder="Ingrese su usuario"
                                                   @bind-Value="usuario.NombreUsuario" />
                                    </div>
                                </div>
                            </div>

                            <!-- Nombre completo -->
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person-vcard"></i></span>
                                    <InputText id="nombreCompleto" class="form-control" placeholder="Ingrese su nombre completo"
                                               @bind-Value="usuario.NombreCompleto" />
                                </div>
                            </div>

                            <!-- Contraseña o botón para cambiarla -->
                            @if (IdUsuarioEditar == 0)
                            {
                                <!-- Para un usuario nuevo se muestra el input de contraseña -->
                                <div class="mb-4">
                                    <div class="input-group">
                                        <span class="input-group-text"><i class="bi bi-key"></i></span>
                                        <InputText id="clave" type="password" class="form-control" placeholder="Ingrese la contraseña"
                                                   @bind-Value="usuario.Clave" />
                                    </div>
                                </div>
                            }
                            else
                            {
                                <!-- En modo edición se oculta el input y se muestra un botón para cambiar la contraseña -->
                                <div class="mb-4">
                                    <button class="btn btn-outline-secondary" type="button" @onclick="AbrirModalCambioClave">
                                        <i class="bi bi-key"></i> Cambiar Contraseña
                                    </button>
                                </div>
                            }

                            <!-- Correo Electrónico -->
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-envelope"></i></span>
                                    <InputText id="email" type="email" class="form-control" placeholder="ejemplo@dominio.com"
                                               @bind-Value="usuario.Email" />
                                </div>
                            </div>

                            <!-- Rol del Usuario -->
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-person-badge me-2"></i>Rol</span>
                                    <InputSelect id="rol" class="form-select" @bind-Value="usuario.RolId">
                                        <option value="0">-- Seleccionar --</option>
                                        @foreach (var rol in listaRoles)
                                        {
                                            <option value="@rol.RolId">@rol.NombreRol</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <!-- Estado del Usuario -->
                            <div class="mb-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-toggle-on me-2"></i>Estado</span>
                                    <InputSelect id="estado" class="form-select" @bind-Value="usuario.Activo">
                                        <option value="true">Habilitado</option>
                                        <option value="false">Deshabilitado</option>
                                    </InputSelect>
                                </div>
                            </div>

                            <!-- Botones -->
                            <div class="d-flex justify-content-between">
                                <button type="submit" class="btn btn-primary" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    }
                                    @btnTexto
                                </button>
                                <a class="btn btn-outline-secondary" href="/usuarios">
                                    <i class="bi bi-arrow-left me-2"></i>Volver a la lista
                                </a>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
            <br />
        </div>
    </div>
</div>

@if (mostrarModalCambioClave)
{
    <div class="modal fade show d-block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Cambiar Contraseña</h5>
                    <button type="button" class="btn-close" @onclick="CerrarModalCambioClave"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="cambioClaveModel" OnValidSubmit="GuardarCambioClave">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label for="nuevaClave" class="form-label">Nueva Contraseña</label>
                            <InputText id="nuevaClave" type="password" class="form-control"
                                       @bind-Value="cambioClaveModel.NuevaClave" />
                        </div>
                        <div class="mb-3">
                            <label for="confirmarClave" class="form-label">Confirmar Contraseña</label>
                            <InputText id="confirmarClave" type="password" class="form-control"
                                       @bind-Value="cambioClaveModel.ConfirmarClave" />
                        </div>
                        <button type="submit" class="btn btn-primary">Guardar</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    public int IdUsuarioEditar { get; set; } = 0;

    private EditContext editContext = null!;
    private string titulo = string.Empty;
    private string btnTexto = string.Empty;
    public bool isSaving = false;

    private UsuarioDTO usuario = new UsuarioDTO();
    private List<RolDTO> listaRoles = new List<RolDTO>();

    // Variables para mostrar el ID y Código del usuario
    private string idUsuarioDisplay = string.Empty;
    private string codigoUsuarioDisplay = string.Empty;

    // Variables para el modal de cambio de contraseña
    private bool mostrarModalCambioClave = false;
    private CambioClaveDTO cambioClaveModel = new CambioClaveDTO();

    // Variables para almacenar el ID del usuario autenticado y los valores originales de Email y Rol
    private int currentUserId;
    private string originalEmail = string.Empty;
    private int originalRolId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user.Identity?.IsAuthenticated == true)
            {
                var idClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                if (!string.IsNullOrEmpty(idClaim))
                {
                    currentUserId = int.Parse(idClaim);
                }
            }

            listaRoles = await RolService.Lista();

            if (IdUsuarioEditar != 0)
            {
                usuario = await UsuarioService.Buscar(IdUsuarioEditar);
                btnTexto = "Actualizar";
                titulo = "Editar Usuario";
                idUsuarioDisplay = usuario.UsuarioId.ToString();
                codigoUsuarioDisplay = usuario.Codigo;

                originalEmail = usuario.Email!;
                originalRolId = usuario.RolId;
            }
            else
            {
                btnTexto = "Guardar";
                titulo = "Nuevo Usuario";

                var usuarios = await UsuarioService.Lista();
                int nextId = usuarios.Any() ? usuarios.Max(u => u.UsuarioId) + 1 : 1;
                idUsuarioDisplay = nextId.ToString();

                await GenerarCodigoUsuario();

                usuario.Activo = true;
            }
            editContext = new EditContext(usuario);
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar datos: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task GenerarCodigoUsuario()
    {
        string codigo;
        bool existe;
        var random = new Random();
        do
        {
            codigo = random.Next(10000, 100000).ToString();
            existe = await UsuarioService.ExisteCodigo(codigo);
        }
        while (existe);

        codigoUsuarioDisplay = codigo;
        usuario.Codigo = codigo;
    }

    private async Task OnValidSubmit()
    {
        isSaving = true;
        try
        {
            int idDevuelto = (IdUsuarioEditar == 0)
                ? await UsuarioService.Guardar(usuario)
                : await UsuarioService.Editar(usuario);

            if (idDevuelto != 0)
            {
                NavigationManager.NavigateTo("/usuarios");
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al guardar el usuario: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isSaving = false;
        }
    }

    private void AbrirModalCambioClave()
    {
        cambioClaveModel = new CambioClaveDTO();
        mostrarModalCambioClave = true;
    }

    private void CerrarModalCambioClave()
    {
        mostrarModalCambioClave = false;
    }

    private async Task GuardarCambioClave()
    {
        if (cambioClaveModel.NuevaClave != cambioClaveModel.ConfirmarClave)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "Las contraseñas no coinciden.",
                    Icon = SweetAlertIcon.Error
                });
            return;
        }

        try
        {
            await UsuarioService.CambiarClave(usuario.UsuarioId, new CambioClaveDTO
                {
                    UsuarioId = usuario.UsuarioId,
                    NuevaClave = cambioClaveModel.NuevaClave,
                    ConfirmarClave = cambioClaveModel.ConfirmarClave
                });

            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Éxito",
                    Text = "La contraseña se actualizó correctamente.",
                    Icon = SweetAlertIcon.Success
                });
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cambiar la contraseña: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            mostrarModalCambioClave = false;
        }
    }
}