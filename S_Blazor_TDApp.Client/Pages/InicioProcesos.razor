@* Simbolo como pagina "/", para que al carga la pagina en el navegado inicie desde esta pagina *@
@page "/"

@* Nombre de pagina *@
@page "/registroProcesos"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject IUsuarioService UsuarioService
@inject ITareaRecurrenteService TareaRecurrenteService
@inject IRegistroProcesosService RegistroProcesoService
@inject IJSRuntime JSRuntime

<!-- Lista de tareas recurrentes reportables -->
<div id="tareas" class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas recurrentes...</label>
        </div>
    }
    else if (listaTareasRecurrentes == null || listaTareasRecurrentes.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron tareas recurrentes para reportar. Cree las tareas desde el menú "<b>Recurrentes</b>" en la barra lateral izquierda.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-card-checklist me-2"></i>Reportar tareas recurrentes
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermTaskChanged"
                                   value="@searchTermTask" />

                            @if (!string.IsNullOrEmpty(searchTermTask))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="#procesos">
                            <i class="bi bi-arrow-bar-down me-2"></i>Procesos
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Recurrente | Desde - Hasta</th>
                                <th>Tiempo</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in filteredTasks)
                            {
                                <tr>
                                    <td>@item.NombreTareaRecurr</td>
                                    <td>
                                        @if (item.DescripcionTareaRecurr.Length > 35)
                                        {
                                            @if (item.ShowFullDescription)
                                            {
                                                <textarea class="form-control slide-down" rows="3" @bind="item.DescripcionTareaRecurr" readonly></textarea>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye-slash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span>@item.DescripcionTareaRecurr.Substring(0, 35) ...</span>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span>@item.DescripcionTareaRecurr</span>
                                        }
                                    </td>
                                    <td align="center">
                                        <span class="badge bg-@(item.Recurrente ? "primary" : "secondary")">
                                            @(item.Recurrente ? "Si" : "No")
                                        </span> | @item.HoraDesde.ToString("hh:mm tt") - @item.HorasHasta.ToString("hh:mm tt")
                                    </td>
                                    <td align="center">@ConvertirTiempoEjecucion(item.TiempoEjecucion)</td>
                                    <td align="center">
                                        <span class="badge bg-@(item.Estado ? "success" : "danger")">
                                            @(item.Estado ? "Renovada" : "Expirada")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => OpenModal(item)" title="Registrar">
                                                <i class="bi bi-pencil-fill me-2"></i>Registrar
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de tareas recurrentes: @filteredTasks.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Lista de procesos registrados -->
<div id="procesos" class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando procesos registrados...</label>
        </div>
    }
    else if (listaRegistroProcesos == null || listaRegistroProcesos.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron procesos de tareas registrados.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-clock-history me-2"></i>Historial de tareas procesadas
                        </h5>
                    </div>

                    @* Filtrado por fecha *@
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-calendar"></i></span>
                            <!-- Solo un input de fecha -->
                            <input type="date" class="form-control" @bind="startDate" @bind:after="FilterTasksProcess" />
                        </div>
                    </div>

                    @* Filtrado por texto *@
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermProcessChanged"
                                   value="@searchTermProcess" />

                            @if (!string.IsNullOrEmpty(searchTermProcess))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearchProcess">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="#tareas">
                            <i class="bi bi-arrow-bar-up me-2"></i>Tareas
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th hidden>ID Tarea</th>
                                <th>Nombre Tarea</th>
                                <th hidden>ID Usuario</th>
                                <th>Usuario</th>
                                <th>Fecha</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in filteredTasksProcess)
                            {
                                <tr>
                                    <td hidden>@item.TareaRecurrId</td>
                                    <td>@item.RefTareaRecurr?.NombreTareaRecurr</td>
                                    <td hidden>@item.UsuarioId</td>
                                    <td>@item.RefUsuario?.NombreUsuario</td>
                                    <td>@item.FechaRegistro.ToString("dd/MM/yyyy - hh:mm:ss tt")</td>
                                    <td>@item.DescripcionRegistro</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de procesos registrados: @filteredTasksProcess.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Modal para registrar los reportes de procesos -->
<div class="modal fade" id="registroProcesoModal" tabindex="-1" aria-labelledby="registroProcesoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <EditForm Model="registroProceso" OnValidSubmit="RegistrarProceso">
                <DataAnnotationsValidator />
                <div class="modal-header">
                    <h5 class="modal-title" id="registroProcesoModalLabel">Registrar Proceso</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="alert alert-info shadow-sm m-3">
                    <strong>Detalles de la tarea seleccionada:</strong>
                    @if (selectedTask != null)
                    {
                        <ul class="list-unstyled mt-2">
                            <li><strong>Nombre:</strong> @selectedTask.NombreTareaRecurr</li>
                            <li><strong>Descripción:</strong> @selectedTask.DescripcionTareaRecurr</li>
                            <li><strong>Recurrente:</strong> @(selectedTask.Recurrente ? "Sí" : "No")</li>
                            <li><strong>Desde:</strong> @selectedTask.HoraDesde.ToString("hh:mm tt")</li>
                            <li><strong>Hasta:</strong> @selectedTask.HorasHasta.ToString("hh:mm tt")</li>
                            <li><strong>Tiempo de Ejecución:</strong> @ConvertirTiempoEjecucion(selectedTask.TiempoEjecucion)</li>
                            <li><strong>Estado:</strong> @(selectedTask.Estado ? "Renovada" : "Expirada")</li>
                        </ul>
                    }
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <InputTextArea id="comentario" class="form-control" placeholder="Escriba el informe..." 
                            @bind-Value="registroProceso.DescripcionRegistro" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button type="submit" class="btn btn-primary">Registrar</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    // Variables que devuelven listas de datos
    private List<RegistroProcesoDTO> listaRegistroProcesos = new List<RegistroProcesoDTO>();
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new List<TareasRecurrentesDTO>();

    // Variables para filtrar la lista de tareas y procesos
    private List<TareasRecurrentesDTO> filteredTasks = new List<TareasRecurrentesDTO>();
    private List<RegistroProcesoDTO> filteredTasksProcess = new List<RegistroProcesoDTO>();

    // Variables para la gestión de datos
    private RegistroProcesoDTO registroProceso = new RegistroProcesoDTO();

    // Variables para controlar el estado de la página y filtros
    private bool isLoading = true;
    private string searchTermTask = "";
    private string searchTermProcess = "";
    private DateTime? startDate;
    private TareasRecurrentesDTO? expandedItem = null;
    private TareasRecurrentesDTO? selectedTask = null;

    // Timers para el debounce o delay en la búsqueda
    private System.Threading.Timer? _searchTimerTasks;
    private System.Threading.Timer? _searchTimerProcess;

    // Método que se ejecuta al cargar la página
    protected override async Task OnInitializedAsync()
    {
        await LoadTareasRecurrentes();
        await LoadProcesosRegistrados();
    }

    #region Métodos para cargar tareas, procesos, manejar modal y registrar procesos

    private async Task LoadTareasRecurrentes()
    {
        try
        {
            isLoading = true;
            listaTareasRecurrentes = await TareaRecurrenteService.Lista();
            filteredTasks = listaTareasRecurrentes;
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al cargar las tareas recurrentes: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProcesosRegistrados()
    {
        try
        {
            isLoading = true;
            listaRegistroProcesos = await RegistroProcesoService.ListaProcesos();
            
            // Ordenar la lista de procesos por fecha de registro (descendente)
            listaRegistroProcesos = listaRegistroProcesos.OrderByDescending(p => p.FechaRegistro).ToList();
            filteredTasksProcess = listaRegistroProcesos;
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al cargar los procesos registrados: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenModal(TareasRecurrentesDTO task)
    {
        selectedTask = task;
        registroProceso = new RegistroProcesoDTO
        {
            TareaRecurrId = task.TareaRecurrId,
            UsuarioId = 1, // ID de usuario temporal hasta implementar la autenticación
            FechaRegistro = DateTime.Now
        };
        await JSRuntime.InvokeVoidAsync("showModal", "registroProcesoModal");
    }

    private async Task RegistrarProceso()
    {
        try
        {
            await RegistroProcesoService.GuardarProcesos(registroProceso);
            await LoadProcesosRegistrados();
            await JSRuntime.InvokeVoidAsync("hideModal", "registroProcesoModal");
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al registrar el proceso: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
    }

    #endregion

    #region Métodos para mostrar/ocultar descripción, filtrar y convertir tiempos

    private void ToggleDescription(TareasRecurrentesDTO item)
    {
        if (expandedItem != null && expandedItem != item)
        {
            expandedItem.ShowFullDescription = false;
        }

        item.ShowFullDescription = !item.ShowFullDescription;
        expandedItem = item.ShowFullDescription ? item : null;
    }

    // Se llama cuando el usuario escribe en el input de "Tasks"
    private void OnSearchTermTaskChanged(ChangeEventArgs e)
    {
        // Actualiza la variable con el texto del usuario
        searchTermTask = e.Value?.ToString() ?? string.Empty;

        // Si el timer ya existe, lo descartamos (reiniciamos el conteo)
        _searchTimerTasks?.Dispose();

        // Iniciamos un nuevo timer con 500ms (medio segundo) de delay
        _searchTimerTasks = new System.Threading.Timer(_ =>
        {
            // Llamamos al método de filtrado en el hilo de Blazor
            InvokeAsync(() =>
            {
                FilterTasks();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    // Se llama cuando el usuario escribe en el input de "Procesos"
    private void OnSearchTermProcessChanged(ChangeEventArgs e)
    {
        searchTermProcess = e.Value?.ToString() ?? string.Empty;

        _searchTimerProcess?.Dispose();

        _searchTimerProcess = new System.Threading.Timer(_ =>
        {
            InvokeAsync(() =>
            {
                FilterTasksProcess();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void FilterTasks()
    {
        filteredTasks = listaTareasRecurrentes.Where(t =>
            string.IsNullOrWhiteSpace(searchTermTask) ||
            t.NombreTareaRecurr.Contains(searchTermTask, StringComparison.OrdinalIgnoreCase) ||
            t.DescripcionTareaRecurr.Contains(searchTermTask, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private void FilterTasksProcess()
    {
        filteredTasksProcess = listaRegistroProcesos.Where(t =>
            (string.IsNullOrWhiteSpace(searchTermProcess) ||
             t.DescripcionRegistro.Contains(searchTermProcess, StringComparison.OrdinalIgnoreCase)) &&
            (!startDate.HasValue || t.FechaRegistro.Date == startDate.Value.Date)
        ).ToList();
    }

    private void ClearSearch()
    {
        searchTermTask = string.Empty;
        FilterTasks();
    }

    private void ClearSearchProcess()
    {
        searchTermProcess = string.Empty;
        startDate = null;
        FilterTasksProcess();
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440) // 1440 minutos en un día
        {
            int dias = minutos / 1440;
            return $"{dias} {(dias > 1 ? "días" : "día")}";
        }
        else if (minutos >= 60) // 60 minutos en una hora
        {
            int horas = minutos / 60;
            return $"{horas} {(horas > 1 ? "horas" : "hora")}";
        }
        else
        {
            return $"{minutos} min";
        }
    }

    private string ConvertirCantidadEjecuciones(int cantidad)
    {
        return cantidad == 1 ? $"{cantidad} vez" : $"{cantidad} veces";
    }

    #endregion
}