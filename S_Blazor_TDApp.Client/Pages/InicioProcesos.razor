@page "/registroProcesos"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject IUsuarioService UsuarioService
@inject ITareaRecurrenteService TareaRecurrenteService
@inject IRegistroProcesosService RegistroProcesoService
@inject IJSRuntime JSRuntime

<!-- Lista de tareas recurrentes reportables -->
<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas recurrentes...</label>
        </div>
    }
    else if (listaTareasRecurrentes == null || listaTareasRecurrentes.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron tareas recurrentes para reportar.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-clock-history me-2"></i>Reporte de tareas
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterTasks" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Recurrente | Desde - Hasta</th>
                                <th>Tiempo</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in filteredTasks)
                            {
                                <tr>
                                    <td>@item.NombreTareaRecurr</td>
                                    <td>
                                        @if (item.DescripcionTareaRecurr.Length > 35)
                                        {
                                            @if (item.ShowFullDescription)
                                            {
                                                <textarea class="form-control slide-down" rows="3" @bind="item.DescripcionTareaRecurr" readonly></textarea>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye-slash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span>@item.DescripcionTareaRecurr.Substring(0, 35) ...</span>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span>@item.DescripcionTareaRecurr</span>
                                        }
                                    </td>
                                    <td align="center">
                                        <span class="badge bg-@(item.Recurrente ? "primary" : "secondary")">
                                            @(item.Recurrente ? "Si" : "No")
                                        </span> | @item.HoraDesde.ToString("hh:mm tt") - @item.HorasHasta.ToString("hh:mm tt")
                                    </td>
                                    <td align="center">@ConvertirTiempoEjecucion(item.TiempoEjecucion)</td>
                                    <td align="center">
                                        <span class="badge bg-@(item.Estado ? "success" : "danger")">
                                            @(item.Estado ? "Renovada" : "Expirada")
                                        </span>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => OpenModal(item)" title="Registrar">
                                                <i class="bi bi-pencil-fill me-2"></i>Registrar
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de tareas recurrentes: @filteredTasks.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Lista de procesos registrados -->
<div class="container-fluid mt-4">
    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando procesos registrados...</label>
        </div>
    }
    else if (listaRegistroProcesos == null || listaRegistroProcesos.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron procesos registrados.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-clock-history me-2"></i>Reporte de tareas procesadas
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..." @bind="searchTerm" @bind:event="oninput" @onkeyup="FilterTasks" />
                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }
                        </div>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Tarea</th>
                                <th>Usuario</th>
                                <th>Fecha</th>
                                <th>Descripción</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in listaRegistroProcesos)
                            {
                                <tr>
                                    <td>@item.TareaRecurrId</td>
                                    <td>@item.UsuarioId</td>
                                    <td>@item.FechaRegistro.ToString("dd/MM/yyyy - hh:mm:ss tt")</td>
                                    <td>@item.DescripcionRegistro</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                Total de tareas recurrentes: @filteredTasksProcess.Count
            </div>
        </div>
        <br />
    }
</div>

<!-- Modal para registrar los reportes de procesos -->
<div class="modal fade" id="registroProcesoModal" tabindex="-1" aria-labelledby="registroProcesoModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="registroProcesoModalLabel">Registrar Proceso</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <EditForm Model="registroProceso" OnValidSubmit="RegistrarProceso">
                    <DataAnnotationsValidator />
                    <div class="mb-3">
                        <label for="comentario" class="form-label">Comentario</label>
                        <InputTextArea id="comentario" class="form-control" @bind-Value="registroProceso.DescripcionRegistro" />
                    </div>
                </EditForm>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                <button type="button" class="btn btn-primary" @onclick="RegistrarProceso">Registrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    // Variables que devuelve una lista de datos
    private List<RegistroProcesoDTO> listaRegistroProcesos = new List<RegistroProcesoDTO>();
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new List<TareasRecurrentesDTO>();

    // Variables para filtrar la lista de tareas recurrentes
    private List<TareasRecurrentesDTO> filteredTasks = new List<TareasRecurrentesDTO>();
    private List<RegistroProcesoDTO> filteredTasksProcess = new List<RegistroProcesoDTO>();

    // Variables para controlar el estado de la página
    private bool isLoading = true;
    private string searchTerm = "";
    private TareasRecurrentesDTO? expandedItem = null;
    private RegistroProcesoDTO registroProceso = new RegistroProcesoDTO();
    private TareasRecurrentesDTO? selectedTask = null;

    // Método que se ejecuta al cargar la página
    protected override async Task OnInitializedAsync()
    {
        await LoadTareasRecurrentes();
        await LoadProcesosRegistrados();
    }

    // Método para cargar las tareas recurrentes
    private async Task LoadTareasRecurrentes()
    {
        try
        {
            isLoading = true;
            listaTareasRecurrentes = await TareaRecurrenteService.Lista();
            filteredTasks = listaTareasRecurrentes;
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al cargar las tareas recurrentes: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task LoadProcesosRegistrados()
    {
        try
        {
            isLoading = true;
            listaRegistroProcesos = await RegistroProcesoService.ListaProcesos();
            filteredTasksProcess = listaRegistroProcesos;
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al cargar los procesos registrados: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task OpenModal(TareasRecurrentesDTO task)
    {
        selectedTask = task;
        registroProceso = new RegistroProcesoDTO
        {
            TareaRecurrId = task.TareaRecurrId,
                UsuarioId = 1, // Asigna el ID del usuario actual, temporal, hasta implementar la autenticación
            FechaRegistro = DateTime.Now
        };
        await JSRuntime.InvokeVoidAsync("showModal", "registroProcesoModal");
    }

    private async Task RegistrarProceso()
    {
        try
        {
            await RegistroProcesoService.GuardarProcesos(registroProceso);
            await LoadProcesosRegistrados();
            await JSRuntime.InvokeVoidAsync("hideModal", "registroProcesoModal");
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "Error",
                Text = $"Error al registrar el proceso: {ex.Message}",
                Icon = SweetAlertIcon.Error
            });
        }
    }


    #region Métodos para mostrar u ocultar la descripción de la tarea recurrente, filtrar y convertir el tiempo de ejecución

    private void ToggleDescription(TareasRecurrentesDTO item)
    {
        if (expandedItem != null && expandedItem != item)
        {
            expandedItem.ShowFullDescription = false;
        }

        item.ShowFullDescription = !item.ShowFullDescription;
        expandedItem = item.ShowFullDescription ? item : null;
    }

    private void FilterTasks()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTasks = listaTareasRecurrentes;
        }
        else
        {
            filteredTasks = listaTareasRecurrentes.Where(t =>
                t.NombreTareaRecurr.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.DescripcionTareaRecurr.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilterTasks();
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440) // 1440 minutos en un día
        {
            int dias = minutos / 1440;
            return $"{dias} día";
        }
        else if (minutos >= 60) // 60 minutos en una hora
        {
            int horas = minutos / 60;
            return $"{horas} hora";
        }
        else
        {
            return $"{minutos} min";
        }
    }

    private string ConvertirCantidadEjecuciones(int cantidad)
    {
        return cantidad == 1 ? $"{cantidad} vez" : $"{cantidad} veces";
    }

    #endregion
}