@page "/tareasRecurrentes"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject ITareaRecurrenteService TareaRecurrenteService

<div class="container-fluid mt-4">

    @if (isLoading)
    {
        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
            <div class="spinner-border text-primary me-2" role="status">
                <span class="visually-hidden"></span>
            </div>
            <label>Cargando tareas recurrentes...</label>
        </div>
    }
    else if (listaTareasRecurrentes == null || listaTareasRecurrentes.Count == 0)
    {
        <div class="alert alert-info shadow-sm">
            <i class="bi bi-info-circle me-2"></i>No se encontraron tareas recurrentes.
        </div>
    }
    else
    {
        <div class="card shadow">
            <div class="card-header bg-light">
                <div class="row align-items-center">
                    <div class="col">
                        <h5 class="text-primary mb-0">
                            <i class="bi bi-clock-history me-2"></i>Gestión - Tareas recurrentes
                        </h5>
                    </div>
                    <div class="col-auto">
                        <div class="input-group">
                            <span class="input-group-text"><i class="bi bi-search"></i></span>
                            <input type="text" class="form-control" placeholder="Buscar..."
                                   @oninput="OnSearchTermChanged"
                                   value="@searchTerm" />

                            @if (!string.IsNullOrEmpty(searchTerm))
                            {
                                <button class="btn btn-outline-secondary" @onclick="ClearSearch">
                                    <i class="bi bi-x"></i>
                                </button>
                            }

                        </div>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-success shadow-sm" href="/tareaRecurrente">
                            <i class="bi bi-plus-circle me-2"></i>Nueva
                        </a>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Nombre</th>
                                <th>Descripción</th>
                                <th>Recurrente | Desde - Hasta</th>
                                <th>Tiemp - Eje</th>
                                <th>Estado</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var item in pagedTasks)
                            {
                                <tr>
                                    <td>@item.NombreTareaRecurr</td>
                                    <td>
                                        @if (item.DescripcionTareaRecurr.Length > 35)
                                        {
                                            @if (item.ShowFullDescription)
                                            {
                                                <textarea class="form-control slide-down" rows="3" @bind="item.DescripcionTareaRecurr" readonly></textarea>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye-slash"></i>
                                                </button>
                                            }
                                            else
                                            {
                                                <span>@item.DescripcionTareaRecurr.Substring(0, 35) ...</span>
                                                <button class="btn btn-link btn-sm p-0 ms-2" @onclick="() => ToggleDescription(item)">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <span>@item.DescripcionTareaRecurr</span>
                                        }
                                    </td>
                                    <td align="center"><span class="badge bg-@(item.Recurrente ? "success" : "secondary")">@(item.Recurrente ? "Si" : "No")</span> | @item.HoraDesde.ToString("hh:mm tt") - @item.HorasHasta.ToString("hh:mm tt")</td>
                                    <td align="center">@ConvertirTiempoEjecucion(item.TiempoEjecucion) - @ConvertirCantidadEjecuciones(item.CantidadEjecuciones)</td>
                                    <td align="center"><span class="badge bg-@(item.Estado ? "primary" : "warning")">@(item.Estado ? "Habilitada" : "Deshabilitada")</span></td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a class="btn btn-outline-primary btn-sm" href="/tareaRecurrente/@item.TareaRecurrId" title="Editar">
                                                <i class="bi bi-pencil-fill"></i>
                                            </a>
                                            <button type="button" class="btn btn-outline-danger btn-sm" @onclick="(() => Eliminar(item.TareaRecurrId, item.DescripcionTareaRecurr!))" title="Eliminar">
                                                <i class="bi bi-trash-fill"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card-footer text-muted">
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <label>Mostrar: </label>
                        <select @onchange="OnPageSizeChanged" class="form-select d-inline-block w-auto">
                            @foreach (var option in pageSizeOptions)
                            {
                                <option value="@option" selected="@(option == pageSize)">@option</option>
                            }
                        </select>
                        usuarios de @filteredTasks.Count en total
                    </div>
                    <div>
                        <button class="btn btn-outline-primary btn-sm" @onclick="PrevPage" disabled="@(currentPage == 1)">Anterior</button>
                        <span class="mx-2">
                            Página @currentPage de @Math.Ceiling((double)filteredTasks.Count / pageSize)
                        </span>
                        <button class="btn btn-outline-primary btn-sm" @onclick="NextPage" disabled="@(currentPage * pageSize >= filteredTasks.Count)">Siguiente</button>
                    </div>
                </div>
            </div>
        </div>
        <br />
    }
</div>

@code {
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new List<TareasRecurrentesDTO>();
    private List<TareasRecurrentesDTO> filteredTasks = new List<TareasRecurrentesDTO>();
    private List<TareasRecurrentesDTO> pagedTasks = new List<TareasRecurrentesDTO>();

    private bool isLoading = true;
    private string searchTerm = "";
    private TareasRecurrentesDTO? expandedItem = null; // Nueva propiedad para rastrear el elemento expandido

    // Timers para el debounce o delay en la búsqueda
    private System.Threading.Timer? _searchTimerTasks;

    // Parámetros de paginación
    private int currentPage = 1;
    private int pageSize = 10;
    private int[] pageSizeOptions = new int[] { 10, 15, 20 };

    protected override async Task OnInitializedAsync()
    {
        await LoadTareasRecurrentes();
    }

    private async Task LoadTareasRecurrentes()
    {
        try
        {
            isLoading = true;
            listaTareasRecurrentes = await TareaRecurrenteService.Lista();
            filteredTasks = listaTareasRecurrentes;
            UpdatePagedTasks();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar las tareas recurrentes: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task Eliminar(int id, string nombreTareaRecurrente)
    {
        var result = await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"¿Deseas eliminar esta tarea recurrente: {nombreTareaRecurrente}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            try
            {
                var deletionResult = await TareaRecurrenteService.Eliminar(id);
                if (deletionResult)
                {
                    listaTareasRecurrentes.RemoveAll(u => u.TareaRecurrId == id);
                    FilterTasks();
                    await SwalService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Eliminado",
                            Text = "La tarea recurrente ha sido eliminada correctamente.",
                            Icon = SweetAlertIcon.Success
                        });
                }
            }
            catch (Exception ex)
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"Ha ocurrido un error al eliminar la tarea recurrente: {ex.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }

    private void ToggleDescription(TareasRecurrentesDTO item)
    {
        if (expandedItem != null && expandedItem != item)
        {
            expandedItem.ShowFullDescription = false;
        }

        item.ShowFullDescription = !item.ShowFullDescription;
        expandedItem = item.ShowFullDescription ? item : null;
    }

    // Se llama cuando el usuario escribe en el input de "Tasks"
    private void OnSearchTermChanged(ChangeEventArgs e)
    {
        // Actualiza la variable con el texto del usuario
        searchTerm = e.Value?.ToString() ?? string.Empty;

        // Si el timer ya existe, lo descartamos (reiniciamos el conteo)
        _searchTimerTasks?.Dispose();

        // Iniciamos un nuevo timer con 500ms (medio segundo) de delay
        _searchTimerTasks = new System.Threading.Timer(_ =>
        {
            // Llamamos al método de filtrado en el hilo de Blazor
            InvokeAsync(() =>
            {
                FilterTasks();
                StateHasChanged();
            });
        }, null, 500, System.Threading.Timeout.Infinite);
    }

    private void FilterTasks()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredTasks = listaTareasRecurrentes;
        }
        else
        {
            filteredTasks = listaTareasRecurrentes.Where(t =>
                t.NombreTareaRecurr.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                t.DescripcionTareaRecurr.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
            ).ToList();
        }
        UpdatePagedTasks();
    }

    private void ClearSearch()
    {
        searchTerm = string.Empty;
        FilterTasks();
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440) // 1440 minutos en un día
        {
            int dias = minutos / 1440;
            return $"{dias} día";
        }
        else if (minutos >= 60) // 60 minutos en una hora
        {
            int horas = minutos / 60;
            return $"{horas} hora";
        }
        else
        {
            return $"{minutos} min";
        }
    }

    private string ConvertirCantidadEjecuciones(int cantidad)
    {
        return cantidad == 1 ? $"{cantidad} vez" : $"{cantidad} veces";
    }

    // Metodos de paginación
    private void UpdatePagedTasks()
    {
        pagedTasks = filteredTasks
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newPageSize))
        {
            pageSize = newPageSize;
            currentPage = 1;
            UpdatePagedTasks();
        }
    }

    private void NextPage()
    {
        if (currentPage * pageSize < filteredTasks.Count)
        {
            currentPage++;
            UpdatePagedTasks();
        }
    }

    private void PrevPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePagedTasks();
        }
    }
}