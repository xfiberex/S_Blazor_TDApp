@page "/tareasDias"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject ITareaRecurrenteService TareaRecurrenteService
@inject ITareaDiasService TareaDiasService

<div class="container-fluid text-center">
    <div class="row justify-content-center">
        <!-- Formulario para agregar disponibilidad -->
        <!-- TODO: Seguir mejorando el diseño -->
        <div class="col-md-10">
            <div class="card shadow mb-3">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Configurar disponibilidad</h5>
                </div>
                <div class="card-body">
                    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />

                        @if (editContext.GetValidationMessages().Any())
                        {
                            <div class="alert alert-danger mb-3">
                                <h5 class="alert-heading">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Datos necesarios
                                </h5>
                                <ValidationSummary />
                            </div>
                        }

                        <div class="mb-3">
                            <label for="IdTareaRecurrente" class="form-label">Tarea recurrente</label>
                            <div class="input-group">
                                <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                                <!-- Se utiliza la propiedad auxiliar selectedTareaId para capturar el cambio -->
                                <InputSelect id="IdTareaRecurrente" class="form-control" @bind-Value="selectedTareaId">
                                    <option value="0">-- Seleccionar --</option>
                                    @foreach (var tarea in listaTareasRecurrentes)
                                    {
                                        <option value="@tarea.TareaRecurrId">@tarea.NombreTareaRecurr</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>
                        <hr />

                        <label for="datosTareaRecurrente" class="form-label label-Custom">Información detallada de la tarea</label>
                        <hr />

                        <!-- Controles para mostrar la información de la tarea recurrente -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="Recurrente" class="form-label">Recurrente</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-arrow-repeat"></i></span>
                                    <InputText id="Recurrente" class="form-control" @bind-Value="tareaRecurrenteDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="HoraDesde" class="form-label">Hora Desde</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-clock"></i></span>
                                    <InputText id="HoraDesde" class="form-control" @bind-Value="horaDesdeString" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="HorasHasta" class="form-label">Hora Hasta</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-clock-fill"></i></span>
                                    <InputText id="HorasHasta" class="form-control" @bind-Value="horasHastaString" disabled />
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="TiempoEjecucion" class="form-label">Tiempo de Ejecución</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-hourglass"></i></span>
                                    <InputText id="TiempoEjecucion" class="form-control" @bind-Value="tiempoEjecucionDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="CantidadEjecuciones" class="form-label">Cantidad de Ejecuciones</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-list-ol"></i></span>
                                    <InputText id="CantidadEjecuciones" class="form-control" @bind-Value="cantidadEjecucionesDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="Estado" class="form-label">Estado</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                                    <InputText id="Estado" class="form-control" @bind-Value="estadoString" disabled />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <!-- Lista de días configurados para la tarea seleccionada -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-10">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">Días configurados</h5>
                </div>
                <!-- Aquí se puede agregar el contenido correspondiente -->
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int IdTareasDiasAñadir { get; set; } = 0;

    private string titulo = string.Empty;
    private string btnTexto = string.Empty;
    public bool isSaving = false;

    private TareaDiasDTO tareaDias = new TareaDiasDTO();
    private TareasRecurrentesDTO tareaRecurrente = new TareasRecurrentesDTO();
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new List<TareasRecurrentesDTO>();

    private EditContext editContext = null!;

    // Variables auxiliares para mostrar valores formateados
    private string tareaRecurrenteDisplay = string.Empty;
    private string horaDesdeString = string.Empty;
    private string horasHastaString = string.Empty;
    private string estadoString = string.Empty;
    private string tiempoEjecucionDisplay = string.Empty;
    private string cantidadEjecucionesDisplay = string.Empty;

    // Propiedad auxiliar para capturar la selección en el InputSelect
    private int _selectedTareaId;
    private int selectedTareaId
    {
        get => _selectedTareaId;
        set
        {
            if (_selectedTareaId != value)
            {
                _selectedTareaId = value;
                tareaDias.TareaRecurrId = value;
                ActualizarDatosTarea();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(tareaDias);
        try
        {
            // Cargar la lista de tareas recurrentes.
            listaTareasRecurrentes = await TareaRecurrenteService.Lista();
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar datos: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task OnValidSubmit()
    {
        isSaving = true;
        try
        {
            int idDevuelto = 0;
            if (IdTareasDiasAñadir == 0)
            {
                idDevuelto = await TareaDiasService.Guardar(tareaDias);
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Ha ocurrido un error al guardar el usuario: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isSaving = false;
        }
    }

    private void ActualizarDatosTarea()
    {
        if (selectedTareaId == 0)
        {
            // Limpiar los campos si se selecciona la opción con valor 0
            tareaRecurrenteDisplay = string.Empty;
            horaDesdeString = string.Empty;
            horasHastaString = string.Empty;
            estadoString = string.Empty;
            tiempoEjecucionDisplay = string.Empty;
            cantidadEjecucionesDisplay = string.Empty;
        }
        else
        {
            // Buscar la tarea seleccionada en la lista
            tareaRecurrente = listaTareasRecurrentes.FirstOrDefault(t => t.TareaRecurrId == selectedTareaId)
                              ?? new TareasRecurrentesDTO();

            // Actualizar variables auxiliares para mostrar la información
            tareaRecurrenteDisplay = tareaRecurrente.Recurrente ? "Si" : "No";
            horaDesdeString = tareaRecurrente.HoraDesde.ToString("hh:mm tt");
            horasHastaString = tareaRecurrente.HorasHasta.ToString("hh:mm tt");
            estadoString = tareaRecurrente.Estado ? "Activo" : "Inactivo";
            tiempoEjecucionDisplay = ConvertirTiempoEjecucion(tareaRecurrente.TiempoEjecucion);
            cantidadEjecucionesDisplay = $"{tareaRecurrente.CantidadEjecuciones} {(tareaRecurrente.CantidadEjecuciones == 1 ? "vez" : "veces")}";
        }

        // Opcional: Forzar el re-render si fuera necesario
        StateHasChanged();
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440) // 1440 minutos en un día
        {
            int dias = minutos / 1440;
            return $"{dias} día";
        }
        else if (minutos >= 60) // 60 minutos en una hora
        {
            int horas = minutos / 60;
            return $"{horas} hora";
        }
        else
        {
            return $"{minutos} min";
        }
    }
}