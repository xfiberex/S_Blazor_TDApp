@page "/tareasDias"

@using S_Blazor_TDApp.Shared
@using CurrieTechnologies.Razor.SweetAlert2
@using S_Blazor_TDApp.Client.Services.Interfaces

@inject SweetAlertService SwalService
@inject ITareaRecurrenteService TareaRecurrenteService
@inject ITareaDiasService TareaDiasService

<div class="container-fluid text-center">
    <div class="row justify-content-center">
        <!-- Formulario para agregar disponibilidad -->
        <div class="col-md-10">
            <div class="card shadow mb-3">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">Configurar disponibilidad</h5>
                </div>
                <div class="card-body">
                    <EditForm EditContext="editContext" OnValidSubmit="OnValidSubmit">
                        <DataAnnotationsValidator />

                        @if (editContext.GetValidationMessages().Any())
                        {
                            <div class="alert alert-danger mb-3">
                                <h5 class="alert-heading">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>Datos necesarios
                                </h5>
                                <ValidationSummary />
                            </div>
                        }

                        <div class="row mb-3">
                            <!-- Selector de Tarea Recurrente -->
                            <div class="col-md-5">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-calendar-event"></i></span>
                                    <InputSelect id="IdTareaRecurrente" class="form-control" @bind-Value="selectedTareaId">
                                        <option value="0">-- Seleccionar tarea recurrente --</option>
                                        @foreach (var tarea in listaTareasRecurrentes)
                                        {
                                            <option value="@tarea.TareaRecurrId">@tarea.NombreTareaRecurr</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <!-- Selector de Día Disponible (utilizando la entidad DiasDisponibles) -->
                            <div class="col-md-4">
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-calendar2-week-fill"></i></span>
                                    <InputSelect id="IdDiasDisponibles" class="form-control" @bind-Value="selectedDiaId">
                                        <option value="0">-- Seleccionar día disponible --</option>
                                        @foreach (var dia in diasDisponibles)
                                        {
                                            <option value="@dia.DiaId">@dia.NombreDia</option>
                                        }
                                    </InputSelect>
                                </div>
                            </div>

                            <!-- Botón para asignar -->
                            <div class="col-md-3">
                                <div class="input-group">
                                    <button class="btn btn-success shadow-sm" type="submit" disabled="@isSaving">
                                        @if (isSaving)
                                        {
                                            <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        }
                                        <i class="bi bi-calendar2-plus-fill me-2"></i>Asignar disponibilidad
                                    </button>
                                </div>
                            </div>
                        </div>
                        <br />

                        <label for="datosTareaRecurrente" class="form-label label-Custom">Información detallada de la tarea</label>
                        <hr />

                        <!-- Información de la tarea -->
                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="Recurrente" class="form-label">Recurrente</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-arrow-repeat"></i></span>
                                    <InputText id="Recurrente" class="form-control" @bind-Value="tareaRecurrenteDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="HoraDesde" class="form-label">Hora Desde</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-clock"></i></span>
                                    <InputText id="HoraDesde" class="form-control" @bind-Value="horaDesdeString" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="HorasHasta" class="form-label">Hora Hasta</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-clock-fill"></i></span>
                                    <InputText id="HorasHasta" class="form-control" @bind-Value="horasHastaString" disabled />
                                </div>
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-4">
                                <label for="TiempoEjecucion" class="form-label">Tiempo de Ejecución</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-hourglass"></i></span>
                                    <InputText id="TiempoEjecucion" class="form-control" @bind-Value="tiempoEjecucionDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="CantidadEjecuciones" class="form-label">Cantidad de Ejecuciones</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-list-ol"></i></span>
                                    <InputText id="CantidadEjecuciones" class="form-control" @bind-Value="cantidadEjecucionesDisplay" disabled />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <label for="Estado" class="form-label">Estado</label>
                                <div class="input-group">
                                    <span class="input-group-text"><i class="bi bi-toggle-on"></i></span>
                                    <InputText id="Estado" class="form-control" @bind-Value="estadoString" disabled />
                                </div>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

    <!-- Tabla de Días Configurados para la Tarea Seleccionada -->
    <div class="row justify-content-center mt-4">
        <div class="col-md-10">
            <div class="card shadow">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">Días configurados</h5>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="d-flex justify-content-center align-items-center" style="height: 200px;">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Cargando...</span>
                            </div>
                        </div>
                    }
                    else if (listaTareasDias == null || listaTareasDias.Count == 0)
                    {
                        <div class="alert alert-info shadow-sm">
                            <i class="bi bi-info-circle me-2"></i>No se encontraron días asignados para esta tarea.
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                    <tr>
                                        <th>Día</th>
                                        <th>Acciones</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in listaTareasDias)
                                    {
                                        <tr>
                                            <td>@item.Dia.NombreDia</td>
                                            <td>
                                                <div class="btn-group" role="group">
                                                    <button type="button" class="btn btn-outline-danger btn-sm"
                                                            @onclick="(() => Eliminar(item.TareaDiaId, item.Dia.NombreDia!))"
                                                            title="Eliminar">
                                                        <i class="bi bi-trash-fill"></i>
                                                    </button>
                                                </div>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
            </div>
            <br>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int IdTareasDiasAñadir { get; set; } = 0;

    public bool isSaving = false;
    private bool isLoading = true;

    // Modelo para asignar un día a una tarea
    private TareaDiasDTO tareaDias = new TareaDiasDTO();
    private TareasRecurrentesDTO tareaRecurrente = new TareasRecurrentesDTO();

    // Listas para tareas recurrentes y días asignados
    private List<TareasRecurrentesDTO> listaTareasRecurrentes = new();
    private List<TareaDiasDTO> listaTareasDias = new();

    // Lista de todos los días disponibles (simulada o proveniente de servicio)
    private List<DiasDisponiblesDTO> listaDiasDisponibles = new()
    {
        new DiasDisponiblesDTO { DiaId = 1, NombreDia = "Lunes" },
        new DiasDisponiblesDTO { DiaId = 2, NombreDia = "Martes" },
        new DiasDisponiblesDTO { DiaId = 3, NombreDia = "Miércoles" },
        new DiasDisponiblesDTO { DiaId = 4, NombreDia = "Jueves" },
        new DiasDisponiblesDTO { DiaId = 5, NombreDia = "Viernes" },
        new DiasDisponiblesDTO { DiaId = 6, NombreDia = "Sábado" },
        new DiasDisponiblesDTO { DiaId = 7, NombreDia = "Domingo" }
    };

    private EditContext editContext = null!;

    // Variables para mostrar datos de la tarea seleccionada
    private string tareaRecurrenteDisplay = string.Empty;
    private string horaDesdeString = string.Empty;
    private string horasHastaString = string.Empty;
    private string estadoString = string.Empty;
    private string tiempoEjecucionDisplay = string.Empty;
    private string cantidadEjecucionesDisplay = string.Empty;

    // Propiedad para la tarea recurrente seleccionada
    private int _selectedTareaId;
    private int selectedTareaId
    {
        get => _selectedTareaId;
        set
        {
            if (_selectedTareaId != value)
            {
                _selectedTareaId = value;
                tareaDias.TareaRecurrId = value;
                ActualizarDatosTarea();
                _ = CargarDiasPorTarea(value);
            }
        }
    }

    // Propiedad para el día seleccionado (ahora por ID)
    private int selectedDiaId { get; set; } = 0;

    // Propiedad que devuelve los días disponibles, excluyendo los ya asignados a la tarea
    private IEnumerable<DiasDisponiblesDTO> diasDisponibles =>
        listaDiasDisponibles.Where(dia => !listaTareasDias.Any(td => td.Dia.DiaId == dia.DiaId));

    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(tareaDias);

        try
        {
            isLoading = true;
            // Cargar lista de tareas recurrentes
            listaTareasRecurrentes = await TareaRecurrenteService.Lista();
            // Cargar días asignados para TareaRecurrId (inicialmente 0, probablemente vacía)
            listaTareasDias = await TareaDiasService.ListaPorTareaRecurrId(tareaDias.TareaRecurrId);
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar datos: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnValidSubmit()
    {
        isSaving = true;
        try
        {
            if (IdTareasDiasAñadir == 0)
            {
                // Asignar la tarea y el día seleccionado
                tareaDias.TareaRecurrId = _selectedTareaId;
                // Verificar que se haya seleccionado un día
                if (selectedDiaId == 0)
                {
                    await SwalService.FireAsync(new SweetAlertOptions
                        {
                            Title = "Error",
                            Text = "Debe seleccionar un día disponible.",
                            Icon = SweetAlertIcon.Error
                        });
                    return;
                }
                // Asignar el objeto día (con solo el ID)
                tareaDias.Dia = new DiasDisponiblesDTO { DiaId = selectedDiaId };

                // Validar y guardar
                if (editContext.Validate())
                {
                    await TareaDiasService.Guardar(tareaDias);

                    // Actualizar la lista de días asignados para la tarea actual
                    listaTareasDias = await TareaDiasService.ListaPorTareaRecurrId(_selectedTareaId);

                    // Resetar varible
                    selectedDiaId = 0;
                }
            }
        }
        catch (Exception ex)
        {
            await SwalService.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Ha ocurrido un error al guardar: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task CargarDiasPorTarea(int tareaRecurrId)
    {
        listaTareasDias = await TareaDiasService.ListaPorTareaRecurrId(tareaRecurrId);
        StateHasChanged();
    }

    private void ActualizarDatosTarea()
    {
        if (selectedTareaId == 0)
        {
            tareaRecurrenteDisplay = string.Empty;
            horaDesdeString = string.Empty;
            horasHastaString = string.Empty;
            estadoString = string.Empty;
            tiempoEjecucionDisplay = string.Empty;
            cantidadEjecucionesDisplay = string.Empty;
        }
        else
        {
            tareaRecurrente = listaTareasRecurrentes
                .FirstOrDefault(t => t.TareaRecurrId == selectedTareaId)
                ?? new TareasRecurrentesDTO();

            tareaRecurrenteDisplay = tareaRecurrente.Recurrente ? "Si" : "No";
            horaDesdeString = tareaRecurrente.HoraDesde.ToString("hh:mm tt");
            horasHastaString = tareaRecurrente.HorasHasta.ToString("hh:mm tt");
            estadoString = tareaRecurrente.Estado ? "Activo" : "Inactivo";
            tiempoEjecucionDisplay = ConvertirTiempoEjecucion(tareaRecurrente.TiempoEjecucion);
            cantidadEjecucionesDisplay =
                $"{tareaRecurrente.CantidadEjecuciones} " +
                (tareaRecurrente.CantidadEjecuciones == 1 ? "vez" : "veces");
        }
    }

    private string ConvertirTiempoEjecucion(int minutos)
    {
        if (minutos >= 1440)
        {
            int dias = minutos / 1440;
            return $"{dias} día";
        }
        else if (minutos >= 60)
        {
            int horas = minutos / 60;
            return $"{horas} hora";
        }
        else
        {
            return $"{minutos} min";
        }
    }

    private async Task Eliminar(int id, string nombreDia)
    {
        var result = await SwalService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = $"¿Deseas eliminar el día: {nombreDia}?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, eliminar",
                CancelButtonText = "Cancelar"
            });

        if (result.IsConfirmed)
        {
            try
            {
                var deletionResult = await TareaDiasService.Eliminar(id);
                if (deletionResult)
                {
                    listaTareasDias.RemoveAll(u => u.TareaDiaId == id);
                }
            }
            catch (Exception ex)
            {
                await SwalService.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = $"Ha ocurrido un error al eliminar: {ex.Message}",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
    }
}